/*
   Jason Gradle build file
*/

apply plugin: 'java'

defaultTasks 'config'

// version '3.2-SNAPSHOT'
// group   'org.jason'

// java {
//     toolchain {
//         languageVersion = JavaLanguageVersion.of(17)
//     }
// }

// repositories {
//     mavenCentral()

//     maven { url "https://raw.githubusercontent.com/jacamo-lang/mvn-repo/master" }
// }

// dependencies {
//     implementation 'net.sf.ingenias:jade:4.3'
//     //implementation('org.apache.ant:ant:1.10.5')

//     implementation group: 'javax.json', name: 'javax.json-api', version: '1.1.4'
//     implementation group: 'org.glassfish', name: 'javax.json', version: '1.1.4'

//     testImplementation group: 'junit', name: 'junit', version: '4.12'
// }

// copy dep jars and scritps into build directory
/*
task copyJarsToBuild {
    inputs.files configurations.runtimeClasspath.files
    inputs.dir   'src/main/resources/scripts'
    outputs.dir  'build/libs'
    outputs.dir  'build/scripts'
    doLast {
        copy {
            from configurations.runtimeClasspath
            into 'build/libs'
        }
        copy {
            from 'src/main/resources/scripts'
            into 'build/scripts'
            include '**'
            filter {
                String line -> line.replaceAll("JasonREL=[0-9]+\\.[0-9]+", "JasonREL="+project.version)
            }
            filter {
                String line -> line.replaceAll("JadeJar", file(configurations.compileClasspath.find { it.name.startsWith("jade-") }).name)
            }
        }
    }
}*/

// jar {
//     archiveBaseName = 'jason'
//     manifest {
//         attributes 'Specification-Title': 'Jason Language',
//                    'Specification-Version': project.version,
//                    'Implementation-Version': new Date().toString(),
//                    'Main-Class': 'jason.infra.local.RunLocalMAS'
//     }
//     from('src') {
//         include '/test/jason/inc/**/*.asl'
//         include '/test/jason/**/*.mas2j'
//     }
// }
//jar.dependsOn(copyJarsToBuild)

clean {
    delete 'bin'
    delete 'doc/api'
    delete 'doc/faq.html'
    delete 'doc/index.html'
    delete 'doc/readme.html'
    delete 'readme.html'
    delete 'doc/release-notes.html'

    delete fileTree('doc/tutorials')  { include '**/*.html'  }
    delete fileTree('doc/tech')       { include '**/*.html'  }
    delete fileTree('doc/tutorials')  { include '**/bin/**/*'  }

    delete fileTree('.')  { include '**/*~'  }
    delete fileTree('.')  { include '**/.stop___MAS'  }
    delete fileTree('.')  { include '**/APDescription.txt'  }
    delete fileTree('.')  { include '**/MTPs-Main-Container.txt'  }

    delete fileTree('examples')  { include '**/bin/**'  }
    delete fileTree('examples')  { include '**/*.log'  }
    delete fileTree('demos')  { include '**/bin/**'  }
    delete fileTree('demos')  { include '**/*.log'  }
    delete 'demos/persistent-belief-base/a.bb'

    def emptyDirs = []

    fileTree (dir: 'examples').visit {
        def File f = it.file
        if (f.isDirectory() ) {
            def children = project.fileTree(f).filter { it.isFile() }.files
            if (children.size() == 0) {
                emptyDirs << f
            }
        }
    }
    fileTree (dir: 'demos').visit {
        def File f = it.file
        if (f.isDirectory() ) {
            def children = project.fileTree(f).filter { it.isFile() }.files
            if (children.size() == 0) {
                emptyDirs << f
            }
        }
    }
    emptyDirs.reverseEach { it.delete() }
}

task createCLIBin (dependsOn: [':jason-cli:createBin']) {
    doLast {
        copy {
            from 'jason-cli/build/bin'
            into 'bin'
        }
    }
}

task config (dependsOn: ['createCLIBin']) {
    doLast {
        println '------'
        println ''
        println 'you can set the Jason home directory with the following command:'
        println '     export JASON_HOME='+project.projectDir.absolutePath
        println ''
        println 'and also change your PATH with:'
        println '     export PATH=$JASON_HOME/bin:$PATH'
        println ''
        println '-----'
    }
}

// javadoc {
//     options.showAll()
//     options.encoding('UTF-8')
//     options.setUse(true)
//     options.author(true)
//     options.version(true)
//     options.windowTitle('Jason API')
//     options.docTitle('Jason API')
//     options.footer('<a href=http://jason.sf.net>Jason Site</a>')
//     destinationDir = file("${buildDir}/../doc/api")
//     doFirst {
//         javadoc.title = 'Jason API'
//         javadoc.options.docTitle = javadoc.title
//     }
// }

// the following lines is used to avoid errors while generating javadoc
// if (JavaVersion.current().isJava8Compatible()) {
//     allprojects {
//       tasks.withType(Javadoc) {
//         options.addStringOption('Xdoclint:none', '-quiet')
//       }
//     }
// }


// task javadocJar (type: Jar, dependsOn: javadoc) {
//     archiveBaseName = 'jason'
//     classifier = 'javadoc'
//     from '${docsDir}/../../doc/api'
// }

// task sourceJar (type : Jar) {
//     archiveBaseName = 'jason'
//     classifier = 'sources'
//     from sourceSets.main.allSource
//     duplicatesStrategy = 'include'

// }

// artifacts {
//     archives jar, sourceJar, javadocJar
// }


// publishing {
//     publications {
//         maven(MavenPublication) {
//             from components.java
//                   artifact sourceJar
//                   artifact javadocJar
//             artifactId 'jason'
//         }
//     }
// }

// compileJavacc {
//     inputDirectory = file('src/main/javacc')
//     outputDirectory = file(project.buildDir.absolutePath + '/generated/javacc')
// }


// jjdoc {
//     outputDirectory = file(project.projectDir.absolutePath + '/doc/tech')
//     //arguments = [text: 'true']
// }

// task publishMavenGitHub(dependsOn: [ 'build', 'publishToMavenLocal']) {
//   doLast {
//     def wdir = System.getProperty("user.home")+'/.m2/repository/org/jason/jason'
//     def rdir = '../jacamo-mvn-repo'
//     exec {
//         commandLine 'git', 'pull'
//         workingDir rdir
//     }
//     copy {
//         from wdir
//         into rdir + '/org/jason/jason'
//     }
//     exec {
//         commandLine 'git', 'add', '*'
//         workingDir rdir
//     }
//     exec {
//         commandLine 'git', 'commit', '-a', '-m', 'new version of jason '+project.version
//         workingDir rdir
//     }
//     exec {
//         commandLine 'git', 'push'
//         workingDir rdir
//     }
//   }
// }


// Builds the distribution, documentation and a new release
task doc(dependsOn: [ ':interpreter:jjdoc', ':interpreter:javadoc', 'renderAsciiDocs']) {
}

task renderAsciiDocs(type: Exec) {
    commandLine 'find', '.', '-name', '*.adoc', '-exec', 'doc/asciidoc-docker', '{}', ';'
}

// task fixTab {
//     ant.fixcrlf(eol: 'lf',  includes: '**/*.txt,**/*.bat, **/*.adoc', srcdir: '.')
//     ant.fixcrlf(tab: 'remove', tablength: '4', javafiles: 'true', includes: '**/*.java,**/*.xml,**/*.asl,**/*.mas2j,**/*.txt', srcdir: 'src')
//     ant.fixcrlf(tab: 'remove', tablength: '4', javafiles: 'true', includes: '**/*.java,**/*.xml,**/*.asl,**/*.mas2j,**/*.txt', srcdir: 'examples')
//     ant.fixcrlf(tab: 'remove', tablength: '4', javafiles: 'true', includes: '**/*.java,**/*.xml,**/*.asl,**/*.mas2j,**/*.txt', srcdir: 'demos')
//     ant.fixcrlf(tab: 'remove', tablength: '4', javafiles: 'true', includes: '**/*.java,**/*.xml,**/*.asl,**/*.mas2j,**/*.txt', srcdir: 'doc')
//     ant.fixcrlf(tab: 'remove', tablength: '4', javafiles: 'true', includes: '*.gradle', srcdir: '.')
// }

// Builds the distribution, documentation and a new release
task release(dependsOn: [ 'doc', 'zipRel' ]) {
}

// copy files used to build a release
task copyRel (dependsOn: ['jar', 'createCLIBin']) {
  doLast {
    copy {
        from '.'
        into "build/jason-${jasonVersion}"
        include '*.html'
        include 'LICENSE'
        include 'doc/**'
    }
    // delete fileTree('build/jason-'+project.version+'/doc')  { include '**/*.adoc', '**/Makefile'  }

    copy {
        from 'bin'
        into "build/jason-${jasonVersion}/bin"
    }
    // copy {
    //     duplicatesStrategy = 'include'
    //     from 'build/libs'
    //     from configurations.runtimeClasspath
    //     into 'build/jason-'+project.version+'/libs'
    //     include '**/*.jar'
    // }
    copy {
        from 'examples'
        into "build/jason-${jasonVersion}/examples"
    }
    copy {
        from 'demos'
        into "build/jason-${jasonVersion}/demos"
    }
    // copy {
    //     from 'src'
    //     into 'build/jason-'+project.version+'/src'
    // }
  }
}

// // creates a zip file for a release
task zipRel(type: Zip, dependsOn: copyRel) {
    from "build/jason-${jasonVersion}"
    archiveBaseName = "jason-bin-${jasonVersion}"
}

